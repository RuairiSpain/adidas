version: "3"

services:

  adidas:
    build:
      context: ./adidas
    ports:
      - 3000:3000
    environment:
      - SERVER_PORT=8000
      - CONNECTIONSTRING=mongodb://mongo:27017/notes
      - JAEGER_ENDPOINT=jaeger-collector.jaeger-infra.svc
      - SUBSCRIPTION_SERVICE=subscription-service
      - API_PORT=3000
      - API_KEY=1ab2c3d4e5f61ab2c3d4e5f6
    depends_on:
      - subscription-service
    volumes:
      - ./:/app
    networks:
      - front
      - back

  subscription-service:
    build:
      context: ./subscription
    ports:
      - 19092:19092
    environment:
      - LOG_FILE_NAME=adidas.log
      - OTEL_SERVICE_NAME=nodejs-opentelemetry-tempo
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://localhost:14268/api/traces
      - DB_USER=sa
      - DB_PASS=P@ssw0rd
      - DB_SERVER=otmssql
      - DB_NAME=OtelTempo
    depends_on:
      - postgres
      - kafka
    networks:
      - back

  email-service:
    build:
      context: ./email
    ports:
      - 19092:19092
    environment:
      - MAIL_HOST=smtp.example.com
      - MAIL_USER=user@example.com
      - MAIL_PASSWORD=topsecret
      - MAIL_FROM=noreply@example.com
    depends_on:
      - kafka
    networks:
      - back

  postgres:
    image: postgres:10.5
    restart: always
    env_file:
      - .env.development.local
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '5438:5432'
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ./sql/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      # copy the sql script to fill tables
      - ./sql/fill_tables.sql:/docker-entrypoint-initdb.d/fill_tables.sql
    networks:
      - back

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  redis:
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - back

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - 2181:2181
    volumes:
      - ./_data/zookeeper/data:/data
    networks:
      - back

  kafka:
    image: wurstmeister/kafka:2.12-2.5.0
    hostname: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL://:19092,LISTENER_DOCKER_EXTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CREATE_TOPICS: __consumer_offsets:50:1,send.email:1:1

    volumes:
      - ./_data/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - back

  kafkadrop:
    hostname: kafkadrop
    image: obsidiandynamics/kafdrop:latest
    environment:
      - KAFKA_BROKERCONNECT=kafka:19092
    ports:
      - 9000:9000
    networks:
      - back
      - front

  splunk-otel-collector:
    image: quay.io/signalfx/splunk-otel-collector:latest
    environment:
      - SPLUNK_ACCESS_TOKEN=${SPLUNK_ACCESS_TOKEN}
      - SPLUNK_REALM=${SPLUNK_REALM}
    ports:
      - "13133:13133"
      - "14250:14250"
      - "14268:14268"
      - "4317:4317"
      - "6060:6060"
      - "7276:7276"
      - "8888:8888"
      - "9080:9080"
      - "9411:9411"
      - "9943:9943"
    networks:
      - back
      - front

volumes:
  grafana:
  loki:
  prometheus:

networks:
  front:
    driver: bridge
  back:
    internal: true
  monitoring:
    internal: true